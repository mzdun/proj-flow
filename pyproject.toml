[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.version]
path = "src/proj_flow/__init__.py"

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/docs"]

[tool.hatch.build.targets.wheel]
packages = ["src/proj_flow"]

[project]
authors = [{name = "Marcin Zdun", email = "marcin.zdun@gmail.com"}]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
]
dependencies = [
  "argcomplete~=3.5",
  "chevron2021",
  "prompt_toolkit~=3.0",
  "PyYAML~=6.0",
  "toml~=0.10",
]
description = "C++ project maintenance, automated"
dynamic = ["version"]
keywords = [
  'C/C++',
  'build-tool',
  'c++',
  'ci-cd',
  'continuous-integration',
  'cpp',
  'dependencies',
  'dependency-manager',
  'developer',
  'developer-tools',
  'development',
  'meta-build-tool',
  'pipeline',
  'tools-and-automation',
]
name = "proj-flow"
readme = "README.md"
requires-python = ">=3.10"

[project.urls]
Changelog = "https://github.com/mzdun/proj-flow/blob/main/CHANGELOG.rst"
Documentation = "https://proj-flow.readthedocs.io/en/latest/"
Homepage = "https://pypi.org/project/proj-flow/"
"Source Code" = "https://github.com/mzdun/proj-flow"

[project.scripts]
proj-flow = "proj_flow.cli:main"

[project.optional-dependencies]
dev = [
  "black~=25.0",
  "isort~=6.0",
  "mypy~=1.0",
  "pylint~=3.0",
  "flake8~=7.0",
  "Flake8-pyproject~=1.2",
  "ruff~=0.9",
  "types-PyYAML~=6.0",
  "types-chevron~=0.14",
  "types-toml~=0.10",
]
test = [
  "pytest~=8.0",
  "pytest-cov~=6.0",
  "pytest-mock~=3.0",
]

[tool.pytest.ini_options]
addopts = "--cov --cov-report html --cov-report term-missing --cov-fail-under 50 -s"
# addopts = "-s"
testpaths = ["tests"]

[pytest]
mock_use_standalone_module = true

[tool.coverage.run]
source = ["src"]

[tool.black]
target-version = ["py310", "py311", "py312", "py313"]

[tool.isort]
profile = "black"

[tool.pylint.MASTER]
ignore-paths = [
  "^.*/.venv/.*$",
  "^docs/source/conf.py$",
]

[tool.pylint.DESIGN]
max-args = 9
max-attributes = 20
max-bool-expr = 5
max-branches = 12
max-locals = 20
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 1

[tool.pylint.REFACTORING]
max-nested-blocks = "5"

[tool.pylint.TYPECHECK]
ignored-classes = [
  "optparse.Values",
  "thread._local_",
  "_thead._local",
  "_local",
  "argparse.Namespace",
  "scoped_session",
]

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "missing-module-docstring",
  "missing-function-docstring",
  "missing-class-docstring",
  "protected-access",
  "broad-exception-caught",
  "global-statement",
]

[tool.pylint."FORMAT"]
max-line-length = 140

[tool.mypy]
check_untyped_defs = true
follow_imports = "silent"
pretty = true
show_column_numbers = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "flask_wtf",
  "requests_oauthlib",
  "flask_login",
  "flask_talisman",
  "wtforms",
]

[tool.flake8]
exclude = [
  ".git",
  "__pycache__",
  "docs/source/conf.py",
  "build",
  "dist",
  ".venv",
]
extend-ignore = ["E203"]
max-complexity = 10
max-line-length = 140
per-file-ignores = []

[tool.ruff]
select = ["ALL"]
